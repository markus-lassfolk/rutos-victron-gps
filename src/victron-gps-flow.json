[
    {
        "id": "ee5ae5ad33898519",
        "type": "tab",
        "label": "Victron GPS Control (Joined Flow)",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2326437a891666c0",
        "type": "mqtt in",
        "z": "ee5ae5ad33898519",
        "name": "IDs listener",
        "topic": "device/+/DBus",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2712849475d6de23",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 40,
        "wires": [
            [
                "5fee8ddabc01403b"
            ]
        ]
    },
    {
        "id": "5fee8ddabc01403b",
        "type": "json",
        "z": "ee5ae5ad33898519",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 300,
        "y": 40,
        "wires": [
            [
                "482b018c560e9b5b"
            ]
        ]
    },
    {
        "id": "ce6a835570f84470",
        "type": "inject",
        "z": "ee5ae5ad33898519",
        "name": "Every 30 min",
        "props": [],
        "repeat": "1800",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "9fce52f8a1a19674"
            ]
        ]
    },
    {
        "id": "9fce52f8a1a19674",
        "type": "function",
        "z": "ee5ae5ad33898519",
        "name": "Trigger Branches",
        "func": "return [{payload:\"go\"},{payload:{username:\"YOUR_RUTOS_USERNAME\",password:\"YOUR_RUTOS_PASSWORD\"}}];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "c1a24da9adb9ca38"
            ],
            [
                "a66528a439317aca"
            ]
        ]
    },
    {
        "id": "c1a24da9adb9ca38",
        "type": "exec",
        "z": "ee5ae5ad33898519",
        "command": "grpcurl -plaintext -emit-defaults -d '{\"get_diagnostics\":{}}' 192.168.100.1:9200 SpaceX.API.Device.Device/Handle",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "10",
        "winHide": false,
        "oldrc": false,
        "name": "Get Starlink GPS",
        "x": 570,
        "y": 140,
        "wires": [
            [
                "dc5a2595ae175362"
            ],
            [
                "f085e98a15526b70"
            ],
            []
        ]
    },
    {
        "id": "dc5a2595ae175362",
        "type": "json",
        "z": "ee5ae5ad33898519",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 750,
        "y": 120,
        "wires": [
            [
                "fd8ff7c0ced10b3c"
            ]
        ]
    },
    {
        "id": "fd8ff7c0ced10b3c",
        "type": "function",
        "z": "ee5ae5ad33898519",
        "name": "Format Starlink GPS",
        "func": "msg.topic = \"starlink\";\n\nvar diag = msg.payload && msg.payload.dishGetDiagnostics;\nif (!diag || !diag.location) return null;\n\nvar loc = diag.location;\nif (loc.latitude == null || loc.longitude == null || loc.altitudeMeters == null) return null;\n\nvar o = {\n    lat    : +loc.latitude,\n    lon    : +loc.longitude,\n    alt    : +loc.altitudeMeters,\n    gpsFix: loc.uncertaintyMetersValid ? 1 : 0\n};\nif (loc.uncertaintyMetersValid && loc.uncertaintyMeters != null) {\n    o.hAcc = +loc.uncertaintyMeters;     // horizontal accuracy (m)\n}\nmsg.payload = o;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 120,
        "wires": [
            [
                "7b642f3d653a41be",
                "db6a14247d9366a8"
            ]
        ]
    },
    {
        "id": "f085e98a15526b70",
        "type": "function",
        "z": "ee5ae5ad33898519",
        "name": "Starlink fail",
        "func": "msg.topic=\"starlink\";msg.payload=null;return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 180,
        "wires": [
            [
                "7b642f3d653a41be"
            ]
        ]
    },
    {
        "id": "a66528a439317aca",
        "type": "http request",
        "z": "ee5ae5ad33898519",
        "name": "RUTOS login",
        "method": "POST",
        "ret": "json",
        "paytoqs": "ignore",
        "url": "https://192.168.80.1/api/login",
        "tls": "19c194ce1c405d3a",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 550,
        "y": 260,
        "wires": [
            [
                "b45ea597eedc489c"
            ]
        ]
    },
    {
        "id": "b45ea597eedc489c",
        "type": "function",
        "z": "ee5ae5ad33898519",
        "name": "Set auth header",
        "func": "const p=typeof msg.payload==='string'?JSON.parse(msg.payload):msg.payload;const t=p?.data?.token;if(!t)return null;msg.headers={Authorization:`Bearer ${t}`};msg.payload={};return msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 260,
        "wires": [
            [
                "d48341a2fab225d8"
            ]
        ]
    },
    {
        "id": "d48341a2fab225d8",
        "type": "http request",
        "z": "ee5ae5ad33898519",
        "name": "Get RUTOS GPS",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://192.168.80.1/api/gps/position/status",
        "tls": "19c194ce1c405d3a",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 340,
        "wires": [
            [
                "4ed8a1fdd771299b",
                "86f3924c708376e8"
            ]
        ]
    },
    {
        "id": "4ed8a1fdd771299b",
        "type": "function",
        "z": "ee5ae5ad33898519",
        "name": "Format RUTOS GPS",
        "func": "msg.topic = \"rutos\";\n\nvar d = msg.payload && msg.payload.data;\nif (!d) return null;\n\nvar fix = parseInt(d.fix_status, 10) || 0;\nif (d.latitude == null || d.longitude == null || d.altitude == null) return null;\n\nvar o = {\n    lat    : +d.latitude,\n    lon    : +d.longitude,\n    alt    : +d.altitude,\n    gpsFix: fix\n};\n\nif (d.satellites != null) o.sats = +d.satellites;   // satellite count\nif (d.accuracy  != null) o.hAcc = +d.accuracy;      // HDOP (m)\nif (d.speed       != null) {\n    var s = +d.speed;                              // km / h\n    if (!isNaN(s)) o.speed = s * 0.277777778;       // → m / s\n}\nmsg.payload = o;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 340,
        "wires": [
            [
                "7b642f3d653a41be",
                "d98b05fb656aca04"
            ]
        ]
    },
    {
        "id": "7b642f3d653a41be",
        "type": "join",
        "z": "ee5ae5ad33898519",
        "name": "Combine GPS",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "15",
        "count": "2",
        "reduceRight": false,
        "x": 1200,
        "y": 180,
        "wires": [
            [
                "639fa7037bbdf28a",
                "296c3c9ece06f1ca"
            ]
        ]
    },
    {
        "id": "639fa7037bbdf28a",
        "type": "function",
        "z": "ee5ae5ad33898519",
        "name": "Select, Combine & Check",
        "func": "function hav(p1,p2){\n    const R=6371000,rad=Math.PI/180;\n    const dLat=(p2.lat-p1.lat)*rad,dLon=(p2.lon-p1.lon)*rad;\n    const lat1=p1.lat*rad,lat2=p2.lat*rad;\n    const a=Math.sin(dLat/2)**2+Math.cos(lat1)*Math.cos(lat2)*Math.sin(dLon/2)**2;\n    return R*2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));\n}\n\nconst star = msg.payload.starlink||{};\nconst rut  = msg.payload.rutos  ||{};\nconst last = flow.get('last_position')||{};\nconst now  = Date.now();\n\n/* quality tests --------------------------------------------------- */\nconst goodRut  = rut.gpsFix>0  && Number.isFinite(rut.hAcc)  && rut.hAcc < 2;\nconst goodStar = star.gpsFix>0 && Number.isFinite(star.hAcc) && star.hAcc < 10;\n\nlet src;                       // 'rut' | 'star'\nif (goodRut && goodStar){\n    src = (rut.hAcc <= star.hAcc) ? 'rut' : 'star';\n}else if (goodRut){\n    src = 'rut';\n}else if (goodStar){\n    src = 'star';\n}else{\n    return null;               // neither source good enough → skip cycle\n}\n\n/* selected coordinates ------------------------------------------- */\nconst s = src==='rut' ? rut : star;\nlet c = {\n    lat    : s.lat,\n    lon    : s.lon,\n    alt    : s.alt,\n    gpsFix: s.gpsFix,\n    hAcc  : s.hAcc,\n    sats  : s.sats\n};\n\n/* speed ----------------------------------------------------------- */\nif (Number.isFinite(s.speed)){\n    c.speed = s.speed;                         // km/h already\n}else if (Number.isFinite(last.lat) && Number.isFinite(last.lon) && last.ts){\n    const m  = hav(last,c);\n    const sec= (now-last.ts)/1000;\n    c.speed  = sec ? (m/sec)*3.6 : 0;         // km/h\n}else{\n    c.speed = 0;\n}\n\n/* distance moved -------------------------------------------------- */\nconst moved = Number.isFinite(last.lat) ? hav(last,c) : 0;\n\n/* change detection ------------------------------------------------ */\nflow.set('last_position',{...c,ts:now});\nconst EPS=1e-7;\nconst changed = Math.abs((last.lat||0)-c.lat)>EPS ||\n                Math.abs((last.lon||0)-c.lon)>EPS ||\n                Math.abs((last.alt||0)-c.alt)>0.05 ||\n                Math.abs((last.speed||0)-c.speed)>0.1;\nif (!changed) return null;\n\n/* output(s) ------------------------------------------------------- */\nmsg.payload = c;\nreturn [\n    msg,\n    moved>500 ? {payload:c,distance:moved} : null\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 180,
        "wires": [
            [
                "74cb62872a4dc6b4",
                "a0e1338572a8b2e8"
            ],
            [
                "f27f8994d00d5566",
                "a85ffec57d601999"
            ]
        ]
    },
    {
        "id": "5957286815465153",
        "type": "mqtt in",
        "z": "ee5ae5ad33898519",
        "name": "GPS tap",
        "topic": "W/+/gps/+/+/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2712849475d6de23",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 480,
        "wires": [
            [
                "e373b5018667a6b7"
            ]
        ]
    },
    {
        "id": "ca312908b4da2a8f",
        "type": "debug",
        "z": "ee5ae5ad33898519",
        "d": true,
        "name": "Pretty GPS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 650,
        "y": 480,
        "wires": []
    },
    {
        "id": "db6a14247d9366a8",
        "type": "debug",
        "z": "ee5ae5ad33898519",
        "d": true,
        "name": "Format Starlink GPS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 100,
        "wires": []
    },
    {
        "id": "d98b05fb656aca04",
        "type": "debug",
        "z": "ee5ae5ad33898519",
        "d": true,
        "name": "Format RUTOS GPS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 400,
        "wires": []
    },
    {
        "id": "74cb62872a4dc6b4",
        "type": "debug",
        "z": "ee5ae5ad33898519",
        "name": "Combined",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1730,
        "y": 100,
        "wires": []
    },
    {
        "id": "f27f8994d00d5566",
        "type": "debug",
        "z": "ee5ae5ad33898519",
        "name": "Moved >500m",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1720,
        "y": 320,
        "wires": []
    },
    {
        "id": "c1044b3ae39f4227",
        "type": "function",
        "z": "ee5ae5ad33898519",
        "name": "Flush pending",
        "func": "const p = flow.get('pending_gps');\nif (p) node.send({payload: p});",
        "outputs": 1,
        "noerr": 0,
        "x": 1100,
        "y": 40,
        "wires": [
            [
                "a0e1338572a8b2e8"
            ]
        ]
    },
    {
        "id": "482b018c560e9b5b",
        "type": "function",
        "z": "ee5ae5ad33898519",
        "name": "IDs learned (patched)",
        "func": "const pl=msg.payload;\nif(pl&&pl.portalId&&pl.deviceInst){global.set('vrm_portal_id',pl.portalId);\nflow.set('gps_device_instance',pl.deviceInst);}\nreturn[ msg, msg ];",
        "outputs": 2,
        "noerr": 0,
        "x": 620,
        "y": 40,
        "wires": [
            [
                "b9a6d8a635265f60"
            ],
            [
                "c1044b3ae39f4227"
            ]
        ]
    },
    {
        "id": "b9a6d8a635265f60",
        "type": "debug",
        "z": "ee5ae5ad33898519",
        "d": true,
        "name": "IDs learned",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 850,
        "y": 20,
        "wires": []
    },
    {
        "id": "a0e1338572a8b2e8",
        "type": "function",
        "z": "ee5ae5ad33898519",
        "name": "Format Victron MQTT (direct)",
        "func": "var portal = global.get('vrm_portal_id');\nif (!portal) {\n    flow.set('pending_gps', msg.payload);\n    return null;\n}\nflow.set('pending_gps', null);\n\nvar dev = flow.get('gps_device_instance') || '1';\nvar base = 'W/' + portal + '/gps/' + dev;\nvar r = (n, d) => Number.isFinite(n) ? +n.toFixed(d) : n;\n\nvar out = [\n    { topic: base + '/Position/Latitude',  payload: JSON.stringify({ value: r(msg.payload.lat, 6) }) },\n    { topic: base + '/Position/Longitude', payload: JSON.stringify({ value: r(msg.payload.lon, 6) }) },\n    { topic: base + '/Altitude',           payload: JSON.stringify({ value: r(msg.payload.alt, 1) }) },\n    { topic: base + '/Speed',              payload: JSON.stringify({ value: r(msg.payload.speed, 2) }) },\n    { topic: base + '/Fix',                payload: JSON.stringify({ value: msg.payload.gpsFix || 0 }) }\n];\n\nif (msg.payload.sats != null)\n    out.push({ topic: base + '/NrOfSatellites', payload: JSON.stringify({ value: msg.payload.sats }) });\n\nif (msg.payload.hAcc != null)\n    out.push({ topic: base + '/Hdop', payload: JSON.stringify({ value: r(msg.payload.hAcc, 1) }) });\n\nout.forEach(node.send);\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 40,
        "wires": [
            [
                "398d8e50169d488b",
                "50b2f94a297cd6fb"
            ]
        ]
    },
    {
        "id": "398d8e50169d488b",
        "type": "mqtt out",
        "z": "ee5ae5ad33898519",
        "name": "Victron MQTT",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "broker": "2712849475d6de23",
        "x": 2060,
        "y": 40,
        "wires": []
    },
    {
        "id": "50b2f94a297cd6fb",
        "type": "debug",
        "z": "ee5ae5ad33898519",
        "name": "debug MQTT out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 2070,
        "y": 100,
        "wires": []
    },
    {
        "id": "70a688e6b7ba0fe4",
        "type": "function",
        "z": "ee5ae5ad33898519",
        "name": "Cache & pretty",
        "func": "// tolerate either a raw string or a decoded object\nconst raw = (typeof msg.payload === 'string') ? JSON.parse(msg.payload) : msg.payload;\n\nconst parts  = msg.topic.split('/');\nconst portal = parts[1];\nconst dev    = parts[3];\nconst path   = parts.slice(4).join('/');\n\nconst cache = flow.get('last_position') || {};\nif (path === 'Position/Latitude')  cache.lat   = +raw.value;\nif (path === 'Position/Longitude') cache.lon   = +raw.value;\nif (path === 'Altitude')           cache.alt   = +raw.value;\nif (path === 'Speed')              cache.speed = +raw.value;\ncache.ts = Date.now();\nflow.set('last_position', cache);\n\nmsg.payload = { portalId: portal, deviceInst: dev, path, value: raw.value };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 480,
        "wires": [
            [
                "ca312908b4da2a8f"
            ]
        ]
    },
    {
        "id": "e373b5018667a6b7",
        "type": "json",
        "z": "ee5ae5ad33898519",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 290,
        "y": 480,
        "wires": [
            [
                "70a688e6b7ba0fe4"
            ]
        ]
    },
    {
        "id": "a85ffec57d601999",
        "type": "exec",
        "z": "ee5ae5ad33898519",
        "command": "grpcurl -plaintext -d {\\\"dish_clear_obstruction_map\\\":{}} 192.168.100.1:9200 SpaceX.API.Device.Device/Handle",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "10",
        "winHide": false,
        "oldrc": false,
        "name": "Reset Obstruction Map",
        "x": 1740,
        "y": 380,
        "wires": [
            [
                "9ccaf4653a8d8315"
            ],
            [],
            []
        ]
    },
    {
        "id": "9ccaf4653a8d8315",
        "type": "debug",
        "z": "ee5ae5ad33898519",
        "name": "Debug Reset Obstruction",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2010,
        "y": 440,
        "wires": []
    },
    {
        "id": "86f3924c708376e8",
        "type": "debug",
        "z": "ee5ae5ad33898519",
        "d": true,
        "name": "Debug RUTOS GPS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 800,
        "y": 400,
        "wires": []
    },
    {
        "id": "296c3c9ece06f1ca",
        "type": "debug",
        "z": "ee5ae5ad33898519",
        "name": "Combine GPS 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 260,
        "wires": []
    },
    {
        "id": "2712849475d6de23",
        "type": "mqtt-broker",
        "name": "Cerbo MQTT",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "19c194ce1c405d3a",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]
